generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                          @id @default(autoincrement())
  address         String                       @unique
  proxyContracts  ProxyContract[]
  subscriptions   Subscription[]
  userVote        UserVote[]
  generalChannels GeneralNotificationChannel[]
  generalSettings GeneralNotificationSetting[]
}

model ProxyContract {
  id      Int    @id @default(autoincrement())
  address String
  userId  Int?
  User    User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Dao {
  id             Int            @id @default(autoincrement())
  name           String         @unique @default("No name")
  picture        String         @default("https://via.placeholder.com/200x200")
  address        String
  snapshotSpace  String
  abi            String
  onchainHandler Int
  latestBlock    Int
  proposalUrl    String
  Proposal       Proposal[]
  Subscription   Subscription[]
}

model Subscription {
  id                   Int                   @id @default(autoincrement())
  userId               Int
  daoId                Int
  Dao                  Dao                   @relation(fields: [daoId], references: [id], onDelete: Cascade)
  User                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  notificationChannels NotificationChannel[]
  notificationSettings NotificationSetting[]
}

model GeneralNotificationChannel {
  id        Int    @id @default(autoincrement())
  type      Int
  connector String
  user      User[]
}

model GeneralNotificationSetting {
  id          Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  delay       Int
  user        User[]
}

model NotificationChannel {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  type           Int
  connector      String
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model NotificationSetting {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  createdTime    DateTime     @default(now())
  delay          Int
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model Proposal {
  id           Int        @id @default(autoincrement())
  daoId        Int
  type         Int
  snapshotId   String     @unique @default(cuid())
  txHash       String     @unique @default(cuid())
  spellAddress String     @unique @default(cuid())
  onchainId    Int        @default(-1)
  title        String
  description  String
  created      DateTime
  voteStarts   DateTime
  voteEnds     DateTime
  url          String
  dao          Dao        @relation(fields: [daoId], references: [id], onDelete: Cascade)
  userVote     UserVote[]
}

model UserVote {
  id           Int      @id @default(autoincrement())
  userId       Int
  proposalId   Int
  snapshotId   String   @unique @default(cuid())
  txHash       String   @unique @default(cuid())
  spellAddress String   @unique @default(cuid())
  voteOption   Int
  voteName     String
  proposal     Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
