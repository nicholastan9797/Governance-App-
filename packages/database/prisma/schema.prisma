generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "clientExtensions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  name  String @unique
  email String @default("")

  notifications Notification[]
  subscriptions Subscription[]
  voters        Voter[]

  newUser                Boolean   @default(true)
  acceptedTerms          Boolean   @default(false)
  acceptedTermsTimestamp DateTime?
  dailyBulletin          Boolean   @default(false)
  lastActive             DateTime  @default(now())
  sessionCount           Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Voter {
  id String @id @default(cuid())

  address String @unique

  votes         Vote[]
  voterHandlers VoterHandler[]
  users         User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DAO {
  id String @id @default(cuid())

  name    String @unique
  picture String

  handlers      DAOHandler[]
  proposals     Proposal[]
  subscriptions Subscription[]
  votes         Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DAOHandler {
  id String @id @default(cuid())

  type          DAOHandlerType
  decoder       Json
  chainIndex    BigInt?        @default(1920000)
  snapshotIndex DateTime?      @default("2009-01-09T04:54:25.00Z")
  lastRefresh   DateTime       @default("2009-01-09T04:54:25.00Z")
  refreshStatus RefreshStatus  @default(NEW)

  daoId         String
  dao           DAO            @relation(fields: [daoId], references: [id], onDelete: Cascade)
  proposals     Proposal[]
  voterHandlers VoterHandler[]
  votes         Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([daoId, type])
}

model Proposal {
  id String @id @default(cuid())

  name       String @db.VarChar(2048)
  externalId String

  choices     Json
  scores      Json
  scoresTotal Float
  quorum      Float

  blockCreated BigInt?  @default(420)
  timeCreated  DateTime
  timeStart    DateTime
  timeEnd      DateTime
  url          String   @db.VarChar(1024)

  notifications Notification[]
  daoHandlerId  String
  daoHandler    DAOHandler     @relation(fields: [daoHandlerId], references: [id], onDelete: Cascade)
  daoId         String
  dao           DAO            @relation(fields: [daoId], references: [id], onDelete: Cascade)
  votes         Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, daoId])
  @@index([daoId])
  @@index([daoHandlerId])
}

model Notification {
  id String @id @default(cuid())

  type RoundupNotificationType

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  daoId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([proposalId, userId, type])
  @@index([userId])
  @@index([proposalId])
}

model Vote {
  id String @id @default(cuid())

  choice      Json
  votingPower Float
  reason      String @db.VarChar(2048)

  voterAddress String
  voter        Voter      @relation(fields: [voterAddress], references: [address], onDelete: Cascade)
  proposalId   String
  proposal     Proposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  daoId        String
  dao          DAO        @relation(fields: [daoId], references: [id], onDelete: Cascade)
  daoHandlerId String
  daoHandler   DAOHandler @relation(fields: [daoHandlerId], references: [id], onDelete: Cascade)

  blockCreated BigInt?   @default(420)
  timeCreated  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([voterAddress, daoId, proposalId])
  @@index([proposalId])
  @@index([daoId])
}

model VoterHandler {
  id String @id @default(cuid())

  chainIndex    BigInt?       @default(1920000)
  snapshotIndex DateTime?     @default("2009-01-09T04:54:25.00Z")
  lastRefresh   DateTime      @default("2009-01-09T04:54:25.00Z")
  refreshStatus RefreshStatus @default(NEW)

  daoHandlerId String
  daoHandler   DAOHandler @relation(fields: [daoHandlerId], references: [id], onDelete: Cascade)
  voterId      String
  voter        Voter      @relation(fields: [voterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([voterId, daoHandlerId])
  @@index([daoHandlerId])
}

model Subscription {
  id String @id @default(cuid())

  notificationsEnabled Boolean @default(true)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  daoId  String
  dao    DAO    @relation(fields: [daoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, daoId])
  @@index([daoId])
}

model Config {
  param String @unique
  value String
}

model Contract {
  address String
  abi     String

  @@unique([address])
}

enum RoundupNotificationType {
  NEW
  ENDING_SOON
  PAST
}

enum DAOHandlerType {
  AAVE_CHAIN
  COMPOUND_CHAIN
  UNISWAP_CHAIN
  ENS_CHAIN
  GITCOIN_CHAIN
  HOP_CHAIN
  DYDX_CHAIN
  MAKER_EXECUTIVE
  MAKER_POLL
  MAKER_POLL_ARBITRUM
  SNAPSHOT
}

enum RefreshStatus {
  NEW
  PENDING
  DONE
}
