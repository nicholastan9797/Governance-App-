generator detective {
  provider     = "cargo prisma"
  output       = "../../../apps/detective/src/prisma.rs"
  relationMode = "prisma"
}

generator refresher {
  provider     = "cargo prisma"
  output       = "../../../apps/refresher/src/prisma.rs"
  relationMode = "prisma"
}

generator discordsecretary {
  provider     = "cargo prisma"
  output       = "../../../apps/discord-secretary/src/prisma.rs"
  relationMode = "prisma"
}

generator telegramsecretary {
  provider     = "cargo prisma"
  output       = "../../../apps/telegram-secretary/src/prisma.rs"
  relationMode = "prisma"
}

generator emailsecretary {
  provider     = "cargo prisma"
  output       = "../../../apps/email-secretary/src/prisma.rs"
  relationMode = "prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                     String         @id @unique(map: "user_id_unique") @default(cuid())
  address                String?
  email                  String?
  verifiedaddress        Boolean        @default(false)
  verifiedemail          Boolean        @default(false)
  isuniswapuser          MagicUserState @default(DISABLED)
  isaaveuser             MagicUserState @default(DISABLED)
  challengecode          String         @default("")
  emaildailybulletin     Boolean        @default(false)
  emptydailybulletin     Boolean        @default(false)
  emailquorumwarning     Boolean        @default(true)
  discordnotifications   Boolean        @default(false)
  discordreminders       Boolean        @default(true)
  discordincludevotes    Boolean        @default(true)
  discordwebhook         String         @default("")
  telegramnotifications  Boolean        @default(false)
  telegramreminders      Boolean        @default(true)
  telegramincludevotes   Boolean        @default(true)
  telegramchatid         String         @default("")
  telegramchattitle      String         @default("")
  acceptedterms          Boolean        @default(false)
  acceptedtermstimestamp DateTime?
  firstactive            DateTime       @default(now())
  lastactive             DateTime       @default(now())
  sessioncount           Int            @default(0)
  subscriptions          subscription[]
  voters                 voter[]
  notifications          notification[]
}

model voter {
  id            String         @id @unique(map: "voter_id_unique") @default(cuid())
  address       String         @unique(map: "voter_address_unique")
  votes         vote[]
  voterhandlers voterhandler[]
  users         user[]
}

model dao {
  id                        String         @unique(map: "dao_id_unique") @default(cuid())
  name                      String         @id @unique(map: "dao_name_unique")
  picture                   String
  quorumwarningemailsupport Boolean        @default(false)
  handlers                  daohandler[]
  proposals                 proposal[]
  subscriptions             subscription[]
  votes                     vote[]
}

model daohandler {
  id            String         @id @unique(map: "daohandler_id_unique") @default(cuid())
  type          DAOHandlerType
  decoder       Json
  chainindex    BigInt         @default(0)
  snapshotindex DateTime       @default(dbgenerated("'1970-01-01 00:00:00.000'"))
  uptodate      Boolean        @default(false)
  daoid         String
  dao           dao            @relation(fields: [daoid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  proposals     proposal[]
  voterhandlers voterhandler[]
  votes         vote[]
}

model proposal {
  id           String         @id @unique(map: "proposal_id_unique") @default(cuid())
  name         String         @db.VarChar(2048)
  externalid   String
  choices      Json
  scores       Json
  scorestotal  Json
  quorum       Json
  state        ProposalState
  blockcreated BigInt?
  timecreated  DateTime
  timestart    DateTime
  timeend      DateTime
  url          String         @db.VarChar(1024)
  daohandlerid String
  daoid        String
  visible      Boolean        @default(true)
  daohandler   daohandler     @relation(fields: [daohandlerid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  dao          dao            @relation(fields: [daoid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  votes        vote[]
  notification notification[]
}

model vote {
  id           String     @id @unique(map: "vote_id_unique") @default(cuid())
  choice       Json
  votingpower  Json
  reason       String     @db.VarChar(2048)
  voteraddress String
  proposalid   String
  daoid        String
  daohandlerid String
  blockcreated BigInt?
  timecreated  DateTime?
  voter        voter      @relation(fields: [voteraddress], references: [address], onDelete: Cascade, onUpdate: NoAction)
  proposal     proposal   @relation(fields: [proposalid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  dao          dao        @relation(fields: [daoid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  daohandler   daohandler @relation(fields: [daohandlerid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model voterhandler {
  id            String     @id @unique(map: "voterhandler_id_unique") @default(cuid())
  chainindex    BigInt     @default(0)
  snapshotindex DateTime   @default(dbgenerated("'1970-01-01 00:00:00.000'"))
  uptodate      Boolean    @default(false)
  daohandlerid  String
  voterid       String
  daohandler    daohandler @relation(fields: [daohandlerid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  voter         voter      @relation(fields: [voterid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model subscription {
  id     String @id @unique(map: "subscription_id_unique") @default(cuid())
  userid String
  daoid  String
  user   user   @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  dao    dao    @relation(fields: [daoid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notification {
  id                 String                      @id @unique(map: "notification_id_unique") @default(cuid())
  userid             String
  proposalid         String?
  type               NotificationType
  dispatchstatus     NotificationDispatchedState @default(NOT_DISPATCHED)
  emailmessageid     String?
  discordmessagelink String?
  discordmessageid   String?
  telegramchatid     String?
  telegrammessageid  String?
  emailtemplate      String?
  user               user                        @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  proposal           proposal?                   @relation(fields: [proposalid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model config {
  key   String @unique(map: "config_key_unique")
  value Int
}

model userTovoter {
  A String
  B String

  @@unique([A, B], map: "_userTovoter_AB_unique")
  @@map("_userTovoter")
}

enum MagicUserState {
  DISABLED
  VERIFICATION
  ENABLED
}

enum NotificationDispatchedState {
  NOT_DISPATCHED
  FIRST_RETRY
  SECOND_RETRY
  THIRD_RETRY
  DISPATCHED
  DELETED
  FAILED
}

enum NotificationType {
  QUORUM_NOT_REACHED_EMAIL
  BULLETIN_EMAIL
  NEW_PROPOSAL_DISCORD
  FIRST_REMINDER_DISCORD
  SECOND_REMINDER_DISCORD
  THIRD_REMINDER_DISCORD
  ENDED_PROPOSAL_DISCORD
  NEW_PROPOSAL_TELEGRAM
  FIRST_REMINDER_TELEGRAM
  SECOND_REMINDER_TELEGRAM
  THIRD_REMINDER_TELEGRAM
  ENDED_PROPOSAL_TELEGRAM
}

enum DAOHandlerType {
  AAVE_CHAIN
  COMPOUND_CHAIN
  UNISWAP_CHAIN
  ENS_CHAIN
  GITCOIN_CHAIN
  HOP_CHAIN
  DYDX_CHAIN
  MAKER_EXECUTIVE
  MAKER_POLL
  MAKER_POLL_ARBITRUM
  INTEREST_PROTOCOL_CHAIN
  ZEROX_PROTOCOL_CHAIN
  SNAPSHOT
}

enum ProposalState {
  PENDING
  ACTIVE
  CANCELED
  DEFEATED
  SUCCEEDED
  QUEUED
  EXPIRED
  EXECUTED
  HIDDEN
  UNKNOWN
}
